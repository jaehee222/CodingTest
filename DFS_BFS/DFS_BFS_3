from collections import deque

# 도시의 개수: N, 도로의 개수: M, 거리정보: K, 출발도시의 번호 X
N, M, K, X = map(int, input().split())

# point! 출발도시의 번호~모든 도시 < 값이 K 인 곳을 찾자!

DFS = []
for i in range(M):
    DFS.append(list(map(int, input().split())))

DFS_2 = [[] for i in range(N + 1)]
# 배열로 노드 연결된 선 만들기..
for i in range(M):
    DFS_2[DFS[i][0]].append(DFS[i][1])

visit = [0] * (N + 1);
queue = deque()
# 방문처리
queue.append(X)
while queue:
    v = queue.popleft()
    for i in DFS_2[v]:
        if visit[i] == 0:
            queue.append(i)
            visit[i] += visit[v] + 1

result = 0
# visited 안에 저장된 최단거리가 K인거만 추출...
for i in range(1,N):
    if visit[i] == K:
        print(i)
        result += 1

# 하나도 없으면 -1
if (result == 0):
    print('-1')
